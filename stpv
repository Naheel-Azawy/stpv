#!/bin/sh

# Copyright (C) 2019-present naheel-azawy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 5    | image      | Do not display anything nor cache output

PV_IMAGE_ENABLED=1
MAX_IMG_CACHE_SIZE=300kb
MAX_IMG_CACHE_W=1920
MAX_IMG_CACHE_H=1080
PREFER_TEXT=1
[ "$XDG_CONFIG_HOME" ] ||
    XDG_CONFIG_HOME="$HOME/.config"
CFG_DIR="$XDG_CONFIG_HOME/stpv"
CFG_FILE="$CFG_DIR/config.sh"
IMAGE_CACHE_DIR="$HOME/.cache/stpv"

PV_IMAGE_ENABLED=
STPV_NO_IMG=
PREFER_TEXT=
DARK_DOCS=
SAFE=1

ID=
FILE_PATH=
W=70 ; H=10
X=0  ; Y=0

IMAGE_CACHE_HASH=
IMAGE_CACHE_PATH=
FILE_EXTENSION=
FILE_EXTENSION_LOWER=
MIMETYPE=
IS_DOC=

usage() {
    BIN=$(basename "$0")
    >&2 printf "usage: %s [--clear] [FILE] [ W H X Y ] [ ID ]\n" "$BIN"
    exit 1
}

newer_than() {
    [ -e "$1" ] && [ -e "$2" ] && {
        res=$(find -L "$1" -prune -newer "$2" -exec echo . \;)
        [ -n "$res" ]
    }
}

colorize_src() {
    if [ "$( stat --printf='%s' -- "${FILE_PATH}" )" -gt 262143 ]; then # > 256KiB
        cat "$FILE_PATH"
    fi
    if [ "$1" = "--md" ]; then
        shift
        bat --color always --style plain --paging never --language markdown \
            --terminal-width "$W" --wrap character -- "$@" 2>/dev/null && return 0
        highlight --replace-tabs=4 --out-format=ansi \
                  --style='pablo' --force markdown -- "$@" 2>/dev/null && return 0
    else
        bat --color always --style plain --paging never \
            --terminal-width "$W" --wrap character -- "$@" 2>/dev/null && return 0
        highlight --replace-tabs=4 --out-format=ansi \
                  --style='pablo' --force -- "$@" 2>/dev/null && return 0
    fi
}

view_pandoc() {
    text=$(pandoc "$1" -t gfm+yaml_metadata_block --columns="$W" -s)
    echo "$text" | mdcat 2>/dev/null && return 0
    echo "$text" | colorize_src --md && return 0
}

handle_extension() {
    case "${FILE_EXTENSION_LOWER}" in
        # Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
            rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            # JSON
            if echo "$FILE_PATH" | grep -Eq '.+\.json\.xz$'; then
                xzcat "${FILE_PATH}" | jq -C . && return 0
            elif echo "$FILE_PATH" | grep -Eq '.+\.el\.gz$'; then
                zcat "${FILE_PATH}" > "/tmp/$$.el" &&
                    colorize_src "/tmp/$$.el" &&
                    rm -f "/tmp/$$.el" && return  0
            else # Others
                atool --list -- "${FILE_PATH}" && return 0
                bsdtar --list --file "${FILE_PATH}" && return 0
            fi
            return 1;;
        rar)
            # Avoid password prompt by providing empty password
            unrar lt -p- -- "${FILE_PATH}" && return 0
            return 1;;
        7z|iso)
            # Avoid password prompt by providing empty password
            7z l -p -- "${FILE_PATH}" && return 0
            return 1;;

        # PDF
        pdf)
            # Preview as text conversion
            pdftotext -layout -l 10 -nopgbrk -q -- "${FILE_PATH}" - && return 0
            mutool draw -F txt -i -- "${FILE_PATH}" 1-10 && return 0
            exiftool "${FILE_PATH}" && return 0
            return 1;;

        # EPUB
        epub)
            epub2txt "${FILE_PATH}" && return 0
            return 1;;

        # BitTorrent
        torrent)
            transmission-show -- "${FILE_PATH}" && return 0
            return 1;;

        # OpenDocument
        odt|ods|odp|sxw)
            # Preview as text conversion
            odt2txt "${FILE_PATH}" && return 0
            return 1;;

        # HTML
        htm|html|xhtml)
            # Preview as text conversion
            w3m -dump "${FILE_PATH}" && return 0
            lynx -dump -- "${FILE_PATH}" && return 0
            elinks -dump "${FILE_PATH}" && return 0
            view_pandoc "${FILE_PATH}" && return 0
            ;;

        # JSON
        json)
            jq -C . "${FILE_PATH}" && return 0;;

        # MarkDown
        md|rst)
            view_pandoc "${FILE_PATH}" && return 0;;

        # CSV
        csv)
            [ "$(du "${FILE_PATH}" | cut -f 1)" -le 1000 ] && {
                TMP_FILE_PATH="${FILE_PATH##*/}"
                TMP_FILE_PATH="/tmp/${TMP_FILE_PATH%.*}.txt"
                pandoc "${FILE_PATH}" -o "$TMP_FILE_PATH" 2>/dev/null \
                    && cat "$TMP_FILE_PATH" \
                    && rm -f "$TMP_FILE_PATH" \
                    && return 0
            };;
    esac
    return 1
}

handle_mime() {
    mimetype="${1}"
    case "${mimetype}" in
        # Directory
        inode/directory)
            ls --color --group-directories-first "${FILE_PATH}" && return 0
            return 1;;

        # Diff
        text/x-diff)
            # use the user-specified git diff pager if it is set
            if git config core.pager >/dev/null; then
                eval "$(git config core.pager)" < "${FILE_PATH}" && return 0
            fi
            # delta and diff-so-fancy are fancy diff pagers.
            delta "${FILE_PATH}" && return 0
            diff-so-fancy "${FILE_PATH}" && return 0
            # colorize_src uses highlight or bat, both of which support
            # diff/patch syntax.
            colorize_src "${FILE_PATH}" && return 0
            return 1;;

        # Text
        text/* | */xml | */json | application/javascript | application/x-elc)
            # Syntax highlight
            colorize_src "$FILE_PATH" && return 0
            cat "$FILE_PATH";;

        # Image
        image/*)
            exiftool "${FILE_PATH}" && return 0
            return 1;;

        # Video
        video/*)
            exiftool "${FILE_PATH}" && return 0
            return 1;;

        # Audio
        audio/*|application/octet-stream)
            exiftool "${FILE_PATH}" && return 0
            return 1;;

        # Office files
        application/*office*|application/ms*|application/vnd.ms-*)
            TMP_FILE_PATH="${FILE_PATH##*/}"
            TMP_FILE_PATH="/tmp/${TMP_FILE_PATH%.*}.txt"
            pandoc "${FILE_PATH}" -o "$TMP_FILE_PATH" 2>/dev/null \
                && cat "$TMP_FILE_PATH" \
                && rm -f "$TMP_FILE_PATH" \
                && return 0
            libreoffice \
                --headless \
                --convert-to txt "${FILE_PATH}" \
                --outdir /tmp >/dev/null \
                && cat "$TMP_FILE_PATH" \
                && rm -f "$TMP_FILE_PATH" \
                && return 0
            return 1;;

        # False CSV: Many text files are falsely identified with CSV mime type. So we just cat them
        application/csv)
            cat "$FILE_PATH";;
    esac
    return 1
}

handle_image() {
    newer_than "${IMAGE_CACHE_PATH}" "${FILE_PATH}" &&
        return

    mkdir -p "$IMAGE_CACHE_DIR"
    rm -f "$IMAGE_CACHE_PATH"

    mimetype="${1}"
    case "${mimetype}" in
        # Image
        image/*) ;; # will be converted below

        # Video
        video/*)
            # Thumbnail
            ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0;;

        # PDF
        application/pdf)
            pdftoppm -f 1 -l 1 \
                     -scale-to-x 1920 \
                     -scale-to-y -1 \
                     -singlefile \
                     -jpeg -tiffcompression jpeg \
                     -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}";;

        # Office files
        application/*office*|application/ms*|application/vnd.*)
            CACHE_DIR="${IMAGE_CACHE_PATH%/*}"
            TMP_FILE_PATH="${FILE_PATH##*/}"
            TMP_FILE_PATH="${CACHE_DIR}/${TMP_FILE_PATH%.*}.jpg"
            rm -f "$TMP_FILE_PATH"
            libreoffice \
                --headless \
                --convert-to jpg "${FILE_PATH}" \
                --outdir "$CACHE_DIR" &&
                mv "$TMP_FILE_PATH" "$IMAGE_CACHE_PATH";;

        # Xounralpp files
        application/x-xopp)
            CACHE_DIR="${IMAGE_CACHE_PATH%/*}"
            TMP_FILE_PATH="${FILE_PATH##*/}"
            TMP_FILE_PATHBASE="${CACHE_DIR}/${TMP_FILE_PATH%.*}"
            rm -f "${TMP_FILE_PATHBASE}.jpg"
            rm -f "${TMP_FILE_PATHBASE}-"*".jpg"
            xournalpp \
                --create-img "${TMP_FILE_PATHBASE}.jpg" \
                "${FILE_PATH}" &&
		mv "${TMP_FILE_PATHBASE}.jpg" "$IMAGE_CACHE_PATH" ||
		mv "${TMP_FILE_PATHBASE}-1.jpg" "$IMAGE_CACHE_PATH"
            rm -f "${TMP_FILE_PATHBASE}-"*".jpg";;

        # Other types
        *) return 1;;
    esac && {

        CONV_FILE="$IMAGE_CACHE_PATH"
        [ ! -f "$CONV_FILE" ] && CONV_FILE="$FILE_PATH"
        DIMS=$(exiftool -S -ImageSize "$CONV_FILE" | cut -d ' ' -f 2)
        WIDTH=$(echo "$DIMS"| cut -dx -f1)
        HEIGHT=$(echo "$DIMS"| cut -dx -f2)

        if [ "$HEIGHT" -gt "$MAX_IMG_CACHE_H" ]; then
            WIDTH=$((WIDTH * MAX_IMG_CACHE_H / HEIGHT))
            HEIGHT="$MAX_IMG_CACHE_H"
        fi

        if [ "$WIDTH" -gt "$MAX_IMG_CACHE_W" ]; then
            HEIGHT=$((HEIGHT * MAX_IMG_CACHE_W / WIDTH))
            WIDTH="$MAX_IMG_CACHE_W"
        fi

        cmd="convert '$CONV_FILE'"
        cmd="$cmd -auto-orient"
        cmd="$cmd -resize ${WIDTH}x${HEIGHT}"
        [ -n "$IS_DOC" ] && [ -n "$DARK_DOCS" ] &&
            cmd="$cmd -channel RGB -negate"
        cmd="$cmd -define jpeg:extent=$MAX_IMG_CACHE_SIZE"
        cmd="$cmd '$IMAGE_CACHE_PATH'"

        eval "$cmd"

    }
}

handle_proc() {
    if echo "$FILE_PATH" | grep -q '^/proc/'; then
        cat "$FILE_PATH"
    else
        return 1
    fi
}

handle_fallback() {
    echo '----- File Type Classification -----' &&
        file --dereference --brief -- "$FILE_PATH"
}

handle_link() {
    if test -L "$FILE_PATH"; then
        printf '\033[1m\033[36mSymbolic link to\033[0m ->\n'
        printf '\033[1m\033[34m%s\033[0m\n' "$FILE_PATH"
        echo
    fi
}

load_config() {
    mkdir -p "$CFG_DIR"
    [ -f "$CFG_FILE" ] && . "$CFG_FILE"
}

real_main() {
    load_config

    [ $# = 0 ] || [ "$1" = -h ] || [ "$1" = --help ] && usage

    if [ $# -eq 2 ] && [ "$1" = '--clear' ]; then
        stpvimg --clear "$2"
        exit
    fi

    FILE_PATH="$1"
    FILE_PATH=$(realpath "$FILE_PATH")

    # prevent caching caches
    echo "$FILE_PATH" | grep -q "^$IMAGE_CACHE_DIR" && {
        echo 'stpv cache file'
        return
    }

    if [ $# -ge 5 ]; then
        W="$2"; H="$3"; X="$4"; Y="$5"
    elif [ $# -eq 1 ]; then
        COLS=$(($(tput cols) / 2))
        LINS=$(($(tput lines) - 2))
        X="$COLS"; Y="1"; W="$COLS"; H="$LINS"
    elif [ $# -eq 2 ]; then
        COLS=$(($(tput cols) / 2))
        LINS="$2"
        X="$COLS"; Y="1"; W="$COLS"; H="$LINS"
    else
        usage
    fi

    [ $# -ge 6 ] && ID="$6"
    [ "$id" ] && ID="$id"
    [ ! "$ID" ] && ID=-1

    IMAGE_CACHE_HASH=$(echo "$FILE_PATH" | md5sum - | cut -d ' ' -f1)
    IMAGE_CACHE_PATH="$IMAGE_CACHE_DIR/$IMAGE_CACHE_HASH.jpg"
    FILE_EXTENSION="${FILE_PATH##*.}"
    FILE_EXTENSION_LOWER=$(echo "$FILE_EXTENSION" | tr '[:upper:]' '[:lower:]')
    MIMETYPE=$(mimetype --dereference --brief --mimetype -- "${FILE_PATH}")
    if [ "$?" -ne 0 ] || [ -z "$MIMETYPE" ]; then
	    MIMETYPE=$(file --dereference --brief --mime-type -- "${FILE_PATH}")
    fi

    [ "$PV_IMAGE_ENABLED" ] &&
        [ "$STPV_NO_IMG" = 1 ] ||
            ! command -v stpvimg >/dev/null ||
            ! stpvimg --enabled ||
            ! stpvimg --alive "$ID" &&
                PV_IMAGE_ENABLED=''

    case "$MIMETYPE" in # if text is preferred for documents
        application/pdf|\
            application/*office*|\
            application/ms*|\
            application/vnd.ms-*|\
            application/vnd.oasis.opendocument.*)
            [ "$PREFER_TEXT" ] && PV_IMAGE_ENABLED=''
            IS_DOC=1;;
    esac

    {
        handle_link

        if [ -n "$PV_IMAGE_ENABLED" ]; then
            handle_image "$MIMETYPE" &&
                stpvimg --add "$ID" "$IMAGE_CACHE_PATH" \
                        "$X" "$Y" "$W" "$H" \
                        2>/dev/null && return 5
        fi
        [ "$ID" ] && stpvimg --clear "$ID"

        handle_extension            ||
            handle_mime "$MIMETYPE" ||
            handle_proc             ||
            handle_fallback         ||
            return 1
    } #| fribidi

}

main() {
    load_config
    if [ "$1" = '--eval' ]; then
        shift
        "$@"
    elif [ "$1" = '--real' ]; then
        shift
        real_main "$@"
    elif [ -n "$SAFE" ]; then
        # Because this script is expected to run inside a file
        # manager. Now imagine scrolling over lots of files
        # quickly. This will create tons of processes that are
        # not so light... Keep in mind `convert` runs a lot in
        # here... So, this will save your life and keep your
        # machine safe!
        real_main "$@" &
        real_pid=$!
        count=0
        while [ $count -lt 500 ] && kill -0 $real_pid 2>/dev/null; do
            count=$((count+1))
            sleep .01
        done
        ps -o pid= --ppid $real_pid | xargs kill >/dev/null 2>/dev/null
        wait $real_pid
    else
        real_main "$@"
    fi
}

main "$@"
