#!/bin/bash

IFS=$'\n'

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 2    | plain text | Display the plain content of the file
# 5    | image      | Do not display anything nor cache output

end() {
    case "$1" in
        2) cat "${FILE_PATH}"; exit 0;;
        5) exit 0;;
        *) exit "$@";;
    esac
}

usage() {
    BIN=$(basename "$0")
    >&2 echo -e "usage: $BIN FILE [ H W X Y ] [ ID ]\n" \
        "      $BIN --clear ID"
    exit 1
}

colorize_src() {
    if [ "$1" = "--md" ]; then
        shift
        highlight --replace-tabs=4 --out-format=ansi \
                  --style='pablo' --force markdown -- "$@" 2>/dev/null && return 0
        bat --color always --style plain --language markdown -- "$@" && return 0
    else
        highlight --replace-tabs=4 --out-format=ansi \
                  --style='pablo' --force -- "$@" 2>/dev/null && return 0
        bat --color always --style plain -- "$@" && return 0
    fi
}

view_pandoc() {
    text=$(pandoc "$1" -t markdown_github+yaml_metadata_block --columns="$W" -s)
    echo "$text" | mdcat && end 0
    echo "$text" | colorize_src --md && end 0
}

handle_extension() {
    case "${FILE_EXTENSION_LOWER}" in
        # Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
            rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            # JSON
            if echo "$FILE_PATH" | grep -Eq '.+\.json\.xz$'; then
                xzcat "${FILE_PATH}" | jq -C . && end 0
            else # Others
                atool --list -- "${FILE_PATH}" && end 0
                bsdtar --list --file "${FILE_PATH}" && end 0
            fi
            end 1;;
        rar)
            # Avoid password prompt by providing empty password
            unrar lt -p- -- "${FILE_PATH}" && end 0
            end 1;;
        7z|iso)
            # Avoid password prompt by providing empty password
            7z l -p -- "${FILE_PATH}" && end 0
            end 1;;

        # PDF
        pdf)
            # Preview as text conversion
            pdftotext -layout -l 10 -nopgbrk -q -- "${FILE_PATH}" - && end 0
            mutool draw -F txt -i -- "${FILE_PATH}" 1-10 && end 0
            exiftool "${FILE_PATH}" && end 0
            end 1;;

        # EPUB
        epub)
            epub2txt "${FILE_PATH}" && end 0
            end 1;;

        # BitTorrent
        torrent)
            transmission-show -- "${FILE_PATH}" && end 0
            end 1;;

        # OpenDocument
        odt|ods|odp|sxw)
            # Preview as text conversion
            odt2txt "${FILE_PATH}" && end 0
            end 1;;

        # HTML
        htm|html|xhtml)
            # Preview as text conversion
            w3m -dump "${FILE_PATH}" && end 0
            lynx -dump -- "${FILE_PATH}" && end 0
            elinks -dump "${FILE_PATH}" && end 0
            view_pandoc "${FILE_PATH}" && end 0
            ;; # Continue with next handler on failure

        # JSON
        json)
            jq -C . "${FILE_PATH}" && end 0
            ;; # Continue with next handler on failure
        md|rst) # TODO org
            view_pandoc "${FILE_PATH}" && end 0
            ;;

        # CSV
        csv)
            [ "$(du "${FILE_PATH}" | cut -f 1)" -le 1000 ] && {
                TMP_FILE_PATH="${FILE_PATH##*/}"
                TMP_FILE_PATH="/tmp/${TMP_FILE_PATH%.*}.txt"
                pandoc "${FILE_PATH}" -o "$TMP_FILE_PATH" 2>/dev/null \
                    && cat "$TMP_FILE_PATH" \
                    && rm -f "$TMP_FILE_PATH" \
                    && end 0
            };;
    esac
}

handle_mime() {
    local mimetype="${1}"
    case "${mimetype}" in
        # Directory
        inode/directory)
            ls --color --group-directories-first "${FILE_PATH}" && end 0
            end 1;;

        # Diff
        text/x-diff)
            # use the user-specified git diff pager if it is set
            if git config core.pager >/dev/null; then
                eval "$(git config core.pager)" < "${FILE_PATH}" && end 0
            fi
            # delta and diff-so-fancy are fancy diff pagers.
            delta "${FILE_PATH}" && end 0
            diff-so-fancy "${FILE_PATH}" && end 0
            # colorize_src uses highlight or bat, both of which support
            # diff/patch syntax.
            colorize_src "${FILE_PATH}" && end 0
            end 1;;

        # Text
        text/* | */xml | */json)
            # Syntax highlight
            if [ "$( stat --printf='%s' -- "${FILE_PATH}" )" -gt 262143 ]; then # > 256KiB
                end 2
            fi
            colorize_src "${FILE_PATH}" && end 0
            end 2;;

        # Image
        image/*)
            exiftool "${FILE_PATH}" && end 0
            end 1;;

        # Video
        video/*)
            exiftool "${FILE_PATH}" && end 0
            end 1;;

        # Audio
        audio/*|application/octet-stream)
            exiftool "${FILE_PATH}" && end 0
            end 1;;

        # Office files
        application/*office*|application/ms*|application/vnd.ms-*)
            TMP_FILE_PATH="${FILE_PATH##*/}"
            TMP_FILE_PATH="/tmp/${TMP_FILE_PATH%.*}.txt"
            pandoc "${FILE_PATH}" -o "$TMP_FILE_PATH" 2>/dev/null \
                && cat "$TMP_FILE_PATH" \
                && rm -f "$TMP_FILE_PATH" \
                && end 0
            libreoffice \
                --headless \
                --convert-to txt "${FILE_PATH}" \
                --outdir /tmp >/dev/null \
                && cat "$TMP_FILE_PATH" \
                && rm -f "$TMP_FILE_PATH" \
                && end 0
            end 1;;

        # False CSV: Many text files are falsely identified with CSV mime type. So we just cat them
        application/csv)
            end 2;;
    esac
}

handle_image() {
    [ -e "${IMAGE_CACHE_PATH}" ] &&
        [ "${IMAGE_CACHE_PATH}" -nt "${FILE_PATH}" ] && return
    mkdir -p "$IMAGE_CACHE_DIR"

    local mimetype="${1}"
    case "${mimetype}" in
        # Image
        image/*) ;; # will be converted below

        # Video
        video/*)
            # Thumbnail
            ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0;;

        # PDF
        application/pdf)
            pdftoppm -f 1 -l 1 \
                     -scale-to-x 1920 \
                     -scale-to-y -1 \
                     -singlefile \
                     -jpeg -tiffcompression jpeg \
                     -- "${FILE_PATH}" "${IMAGE_CACHE_PATH%.*}";;

        # Office files
        application/*office*|application/ms*|application/vnd.ms-*)
            CACHE_DIR="${IMAGE_CACHE_PATH%/*}"
            TMP_FILE_PATH="${FILE_PATH##*/}"
            TMP_FILE_PATH="${CACHE_DIR}/${TMP_FILE_PATH%.*}.png"
            libreoffice \
                --headless \
                --convert-to png "${FILE_PATH}" \
                --outdir "$CACHE_DIR" &&
                mv "$TMP_FILE_PATH" "$IMAGE_CACHE_PATH";;
    esac && {

        CONV_FILE="$IMAGE_CACHE_PATH"
        [ ! -f "$CONV_FILE" ] && CONV_FILE="$FILE_PATH"
        DIMS=$(identify "$CONV_FILE" | awk '{print $3}')
        WIDTH=$(echo "$DIMS"| cut -dx -f1)
        HEIGHT=$(echo "$DIMS"| cut -dx -f2)

        if [ "$HEIGHT" -gt "$MAX_IMG_CACHE_H" ]; then
            WIDTH=$((WIDTH * MAX_IMG_CACHE_H / HEIGHT))
            HEIGHT="$MAX_IMG_CACHE_H"
        fi

        if [ "$WIDTH" -gt "$MAX_IMG_CACHE_W" ]; then
            HEIGHT=$((HEIGHT * MAX_IMG_CACHE_W / WIDTH))
            WIDTH="$MAX_IMG_CACHE_W"
        fi

        convert "$CONV_FILE" \
                -resize "${WIDTH}x${HEIGHT}" \
                -define jpeg:extent="$MAX_IMG_CACHE_SIZE" \
                "${IMAGE_CACHE_PATH}"

    }
}

handle_fallback() {
    echo '----- File Type Classification -----' && file --dereference --brief -- "${FILE_PATH}"
    end 1
}

handle_link() {
    if test -L "$FILE_PATH"; then
        printf '\033[1m\033[36mSymbolic link to\033[0m ->\n'
        FILE_PATH=$(realpath "$FILE_PATH")
        printf '\033[1m\033[34m%s\033[0m\n' "$FILE_PATH"
        echo
    fi
}

real_main() {
    PV_IMAGE_ENABLED='True'
    MAX_IMG_CACHE_SIZE=300kb
    MAX_IMG_CACHE_W=1920
    MAX_IMG_CACHE_H=1080

    [ $# = 0 ] || [ "$1" = -h ] || [ "$1" = --help ] && usage

    if [ $# -eq 2 ] && [ "$1" = '--clear' ]; then
        stpvimg --clear "$2"
        exit
    fi

    FILE_PATH="$1"

    if [ $# -ge 5 ]; then
        H="$2"; W="$3"; X="$4"; Y="$5"
    elif [ $# -eq 1 ]; then
        COLS=$(($(tput cols) / 2))
        LINS=$(($(tput lines) - 2))
        X="$COLS"; Y="1"; W="$COLS"; H="$LINS"
    elif [ $# -eq 2 ]; then
        COLS=$(($(tput cols) / 2))
        LINS="$2"
        X="$COLS"; Y="1"; W="$COLS"; H="$LINS"
    else
        usage
    fi

    if [ $# -ge 6 ]; then
        ID="$6"
    fi

    [ ! "$ID" ] && ID=-1

    IMAGE_CACHE_DIR="$HOME/.cache/stpv"
    IMAGE_CACHE_HASH=$(echo "$FILE_PATH" | sha1sum | awk '{print $1}')
    IMAGE_CACHE_PATH="$IMAGE_CACHE_DIR/$IMAGE_CACHE_HASH.jpg"

    FILE_EXTENSION="${FILE_PATH##*.}"
    FILE_EXTENSION_LOWER=$(echo "$FILE_EXTENSION" | tr '[:upper:]' '[:lower:]')

    MIMETYPE=$(file --dereference --brief --mime-type -- "${FILE_PATH}")

    [ "$PV_IMAGE_ENABLED" = 'True' ] &&
        [ "$STPV_NO_IMG" = 1 ] ||
            ! command -v stpvimg >/dev/null ||
            ! stpvimg --enabled ||
            ! stpvimg --alive "$ID" &&
                PV_IMAGE_ENABLED='False'

    {
        handle_link
        [ "${PV_IMAGE_ENABLED}" = 'True' ] &&
            handle_image "${MIMETYPE}" &>/dev/null &&
            stpvimg --add "$ID" "${IMAGE_CACHE_PATH}" \
                    "$X" "$Y" "$W" "$H" \
                    2>/dev/null && end 5
        [ "$ID" ] && stpvimg --clear "$ID"
        handle_extension
        handle_mime "${MIMETYPE}"
        handle_fallback
    } #| fribidi

    end 1
}

main() {
    if [ "$1" = '--real' ]; then
       shift
       real_main "$@"
    else
        # Because this script is expected to run inside a file
        # manager. Now imagine scrolling over lots of files
        # quickly. This will create tons of processes that are
        # not so light... Keep in mind `convert` runs a lot in
        # here... So, this will save your life and keep your
        # machine safe!
        "$0" --real "$@" &
        count=0
        while [ $count -lt 5 ] && [ "$(jobs)" ]; do
            count=$((count+1))
            sleep .1
        done
        kill $! &>/dev/null
    fi
}

main "$@"
